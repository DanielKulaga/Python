import unittest

def mediana_sort(L, left, right):
    if left > right:
        return None

    list_of_numbers = L[left: right + 1]

    right = len(list_of_numbers) - 1
    left = 0

    list_of_numbers.sort()
    i = ((left + right) // 2)

    if len(list_of_numbers) % 2:
        return list_of_numbers[i]
    else:
        return (list_of_numbers[i] + list_of_numbers[i + 1]) / 2


class TestMediana(unittest.TestCase):
    def setUp(self):
        self.listOfNumbers = [1, 2, 3, 4, 5, 6]
        self.sizeOfList = len(self.listOfNumbers)

    def test_mediana_sort(self):

        self.assertEqual(mediana_sort(self.listOfNumbers, 0, self.sizeOfList - 1), 3.5)
        self.assertEqual(mediana_sort(self.listOfNumbers, 3, self.sizeOfList - 1), 5)
        self.assertEqual(mediana_sort(self.listOfNumbers, 5, self.sizeOfList - 1), 6)
        self.assertEqual(mediana_sort(self.listOfNumbers, 4, self.sizeOfList - 1), 5.5)
        self.assertEqual(mediana_sort(self.listOfNumbers, 5, 3), None)

    def tearDown(self):
        pass


if __name__ == '__main__':
    unittest.main()
